"""
Read coordinate data from a text file and return a dictionary
where keys are point names and values are point coordinates.
"""
def read_coordinates(file_path):
    coordinates = {}
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split()
            name, x, y = parts[0], float(parts[1]), float(parts[2])
            coordinates[name] = (x, y)
    return coordinates


"""
Use the ray-casting algorithm to determine if a point is inside a polygon.
def is_point_inside_polygon(point, polygon):
"""
def is_point_inside_polygon(point, polygon):
    x, y = point
    n = len(polygon)
    inside = False

    for i in range(n):
        x1, y1 = polygon[i]
        x2, y2 = polygon[(i + 1) % n]

        if min(y1, y2) < y <= max(y1, y2) and x <= max(x1, x2):
            if y1 != y2:
                x_intercept = (y - y1) * (x2 - x1) / (y2 - y1) + x1
                if x1 == x2 or x <= x_intercept:
                    inside = not inside

    return inside


"""
Read the coordinates of points and polygon verticesï¼Œ
then iterate through each point and determine if it is inside the polygon
"""
if __name__ == "__main__":
    points_file_path = "points.txt"
    polygon_file_path = "polygon.txt"
    
    # read points
    points = read_coordinates(points_file_path)

    # read polygon vertices
    polygon = list(read_coordinates(polygon_file_path).values())

    # iterate through each point and determine if it is inside the polygon
    for point_name, point_coordinates in points.items():
        result = is_point_inside_polygon(point_coordinates, polygon)
        print(f"{point_name} {'inside' if result else 'outside'} the polygon.")


    
